DROP VIEW public.V_STUDENT_BALANCE RESTRICT;

DROP TABLE public.STUDENT_TRANSACTIONS;
DROP TABLE public.TRANSACTION_TYPE;
DROP SEQUENCE public.STUDENT_TRANSACTIONS_SEQUENCE RESTRICT;
DROP SEQUENCE public.TRANSACTIONS_TYPE_SEQUENCE RESTRICT;

CREATE SEQUENCE TRANSACTIONS_TYPE_SEQUENCE START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;
CREATE TABLE TRANSACTION_TYPE
(
  TRANSACTION_TYPE_ID BIGINT DEFAULT nextval('TRANSACTIONS_TYPE_SEQUENCE')   NOT NULL,
  TYPE_CODE           VARCHAR(64)                                            NOT NULL,
  DESCRIPTION         VARCHAR(256),
  CONSTRAINT TRANSACTION_TYPE_PKEY PRIMARY KEY (TRANSACTION_TYPE_ID)
);

INSERT INTO TRANSACTION_TYPE (TRANSACTION_TYPE_ID, TYPE_CODE, DESCRIPTION) VALUES (DEFAULT, 'D1', 'Cash payment to increase student balance ');
INSERT INTO TRANSACTION_TYPE (TRANSACTION_TYPE_ID, TYPE_CODE, DESCRIPTION) VALUES (DEFAULT, 'D2', 'Bank payment to increase student balance');
INSERT INTO TRANSACTION_TYPE (TRANSACTION_TYPE_ID, TYPE_CODE, DESCRIPTION) VALUES (DEFAULT, 'K1', 'Automatic payment for participation in subject event');

CREATE SEQUENCE STUDENT_TRANSACTIONS_SEQUENCE START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;
CREATE TABLE STUDENT_TRANSACTIONS
(
  TRANSACTION_ID      BIGINT DEFAULT nextval('STUDENT_TRANSACTIONS_SEQUENCE') NOT NULL,
  STUDENT_FK          BIGINT                                                  NOT NULL REFERENCES STUDENTS_VERSION_MAPPING (STUDENT_FK),
  DEBIT               INT DEFAULT 0                                           NOT NULL,
  CREDIT              INT DEFAULT 0                                           NOT NULL,
  DESCRIPTION         VARCHAR(256),
  TRANSACTION_TYPE_FK BIGINT                                                  NOT NULL REFERENCES TRANSACTION_TYPE (TRANSACTION_TYPE_ID),
  CREATED             TIMESTAMP WITH TIME ZONE DEFAULT now(),
  CONSTRAINT STUDENT_TRANSACTION_PKEY PRIMARY KEY (TRANSACTION_ID)
);

CREATE OR REPLACE VIEW V_STUDENT_BALANCE (STUDENT_FK, SUM) AS
  SELECT
    STUDENT_FK,
    (sum(DEBIT) - sum(CREDIT))
  FROM STUDENT_TRANSACTIONS
  GROUP BY STUDENT_FK;
